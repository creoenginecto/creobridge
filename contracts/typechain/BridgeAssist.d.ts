/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BridgeAssistInterface extends ethers.utils.Interface {
  functions: {
    "CURRENT_CHAIN()": FunctionFragment;
    "CURRENT_CHAIN_B32()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "FEE_DENOMINATOR()": FunctionFragment;
    "FULFILL_TX_TYPEHASH()": FunctionFragment;
    "MANAGER_ROLE()": FunctionFragment;
    "MAX_RELAYERS()": FunctionFragment;
    "TOKEN()": FunctionFragment;
    "addChains(string[],uint256[])": FunctionFragment;
    "exchangeRateFrom(bytes32)": FunctionFragment;
    "feeFulfill()": FunctionFragment;
    "feeSend()": FunctionFragment;
    "feeWallet()": FunctionFragment;
    "fulfill((uint256,string,address,string,uint256),bytes[])": FunctionFragment;
    "fulfilledAt(string,string,uint256)": FunctionFragment;
    "getRelayers()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getUserTransactions(address)": FunctionFragment;
    "getUserTransactionsAmount(address)": FunctionFragment;
    "getUserTransactionsSlice(address,uint256,uint256)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isSupportedChain(string)": FunctionFragment;
    "limitPerSend()": FunctionFragment;
    "nonce()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "relayerConsensusThreshold()": FunctionFragment;
    "relayers(uint256)": FunctionFragment;
    "relayersLength()": FunctionFragment;
    "removeChains(string[])": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "send(uint256,string,string)": FunctionFragment;
    "setFee(uint256,uint256)": FunctionFragment;
    "setFeeWallet(address)": FunctionFragment;
    "setLimitPerSend(uint256)": FunctionFragment;
    "setRelayers(address[],uint256)": FunctionFragment;
    "supportedChainList()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transactions(address,uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
    "withdraw(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CURRENT_CHAIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CURRENT_CHAIN_B32",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FULFILL_TX_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_RELAYERS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TOKEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addChains",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRateFrom",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feeFulfill",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeSend", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeWallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fulfill",
    values: [
      {
        amount: BigNumberish;
        fromUser: string;
        toUser: string;
        fromChain: string;
        nonce: BigNumberish;
      },
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfilledAt",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRelayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTransactions",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTransactionsAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTransactionsSlice",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupportedChain",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "limitPerSend",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "relayerConsensusThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "relayers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "relayersLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeChains",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLimitPerSend",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRelayers",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedChainList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CURRENT_CHAIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CURRENT_CHAIN_B32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FULFILL_TX_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_RELAYERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TOKEN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addChains", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRateFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeFulfill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeSend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fulfill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fulfilledAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRelayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTransactionsAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTransactionsSlice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSupportedChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitPerSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "relayerConsensusThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "relayers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "relayersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLimitPerSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRelayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedChainList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "FulfilledTokens(string,address,string,string,uint256,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SentTokens(address,string,string,string,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FulfilledTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SentTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type FulfilledTokensEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber] & {
    fromUser: string;
    toUser: string;
    fromChain: string;
    toChain: string;
    amount: BigNumber;
    exchangeRate: BigNumber;
  }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type SentTokensEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber] & {
    fromUser: string;
    toUser: string;
    fromChain: string;
    toChain: string;
    amount: BigNumber;
    exchangeRate: BigNumber;
  }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class BridgeAssist extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BridgeAssistInterface;

  functions: {
    CURRENT_CHAIN(overrides?: CallOverrides): Promise<[string]>;

    CURRENT_CHAIN_B32(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    FULFILL_TX_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MAX_RELAYERS(overrides?: CallOverrides): Promise<[BigNumber]>;

    TOKEN(overrides?: CallOverrides): Promise<[string]>;

    addChains(
      chains: string[],
      exchangeRatesFromPow: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeRateFrom(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    feeFulfill(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeSend(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeWallet(overrides?: CallOverrides): Promise<[string]>;

    fulfill(
      transaction: {
        amount: BigNumberish;
        fromUser: string;
        toUser: string;
        fromChain: string;
        nonce: BigNumberish;
      },
      signatures: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfilledAt(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRelayers(overrides?: CallOverrides): Promise<[string[]]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getUserTransactions(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber
        ] & {
          amount: BigNumber;
          timestamp: BigNumber;
          fromUser: string;
          toUser: string;
          fromChain: string;
          toChain: string;
          nonce: BigNumber;
          block: BigNumber;
        })[]
      ]
    >;

    getUserTransactionsAmount(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserTransactionsSlice(
      user_: string,
      offset_: BigNumberish,
      limit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber
        ] & {
          amount: BigNumber;
          timestamp: BigNumber;
          fromUser: string;
          toUser: string;
          fromChain: string;
          toChain: string;
          nonce: BigNumber;
          block: BigNumber;
        })[]
      ] & {
        transactions_: ([
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber
        ] & {
          amount: BigNumber;
          timestamp: BigNumber;
          fromUser: string;
          toUser: string;
          fromChain: string;
          toChain: string;
          nonce: BigNumber;
          block: BigNumber;
        })[];
      }
    >;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSupportedChain(
      chain: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    limitPerSend(overrides?: CallOverrides): Promise<[BigNumber]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    relayerConsensusThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    relayers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    relayersLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeChains(
      chains: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    send(
      amount: BigNumberish,
      toUser: string,
      toChain: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFee(
      feeSend_: BigNumberish,
      feeFulfill_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeWallet(
      feeWallet_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLimitPerSend(
      limitPerSend_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRelayers(
      relayers_: string[],
      relayerConsensusThreshold_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportedChainList(overrides?: CallOverrides): Promise<[string[]]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transactions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber
      ] & {
        amount: BigNumber;
        timestamp: BigNumber;
        fromUser: string;
        toUser: string;
        fromChain: string;
        toChain: string;
        nonce: BigNumber;
        block: BigNumber;
      }
    >;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CURRENT_CHAIN(overrides?: CallOverrides): Promise<string>;

  CURRENT_CHAIN_B32(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  FULFILL_TX_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  MAX_RELAYERS(overrides?: CallOverrides): Promise<BigNumber>;

  TOKEN(overrides?: CallOverrides): Promise<string>;

  addChains(
    chains: string[],
    exchangeRatesFromPow: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeRateFrom(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  feeFulfill(overrides?: CallOverrides): Promise<BigNumber>;

  feeSend(overrides?: CallOverrides): Promise<BigNumber>;

  feeWallet(overrides?: CallOverrides): Promise<string>;

  fulfill(
    transaction: {
      amount: BigNumberish;
      fromUser: string;
      toUser: string;
      fromChain: string;
      nonce: BigNumberish;
    },
    signatures: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfilledAt(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRelayers(overrides?: CallOverrides): Promise<string[]>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getUserTransactions(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber
    ] & {
      amount: BigNumber;
      timestamp: BigNumber;
      fromUser: string;
      toUser: string;
      fromChain: string;
      toChain: string;
      nonce: BigNumber;
      block: BigNumber;
    })[]
  >;

  getUserTransactionsAmount(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserTransactionsSlice(
    user_: string,
    offset_: BigNumberish,
    limit_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber
    ] & {
      amount: BigNumber;
      timestamp: BigNumber;
      fromUser: string;
      toUser: string;
      fromChain: string;
      toChain: string;
      nonce: BigNumber;
      block: BigNumber;
    })[]
  >;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSupportedChain(chain: string, overrides?: CallOverrides): Promise<boolean>;

  limitPerSend(overrides?: CallOverrides): Promise<BigNumber>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  relayerConsensusThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  relayers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  relayersLength(overrides?: CallOverrides): Promise<BigNumber>;

  removeChains(
    chains: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  send(
    amount: BigNumberish,
    toUser: string,
    toChain: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFee(
    feeSend_: BigNumberish,
    feeFulfill_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeWallet(
    feeWallet_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLimitPerSend(
    limitPerSend_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRelayers(
    relayers_: string[],
    relayerConsensusThreshold_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportedChainList(overrides?: CallOverrides): Promise<string[]>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transactions(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber
    ] & {
      amount: BigNumber;
      timestamp: BigNumber;
      fromUser: string;
      toUser: string;
      fromChain: string;
      toChain: string;
      nonce: BigNumber;
      block: BigNumber;
    }
  >;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    token: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CURRENT_CHAIN(overrides?: CallOverrides): Promise<string>;

    CURRENT_CHAIN_B32(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    FULFILL_TX_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    MAX_RELAYERS(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN(overrides?: CallOverrides): Promise<string>;

    addChains(
      chains: string[],
      exchangeRatesFromPow: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    exchangeRateFrom(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeFulfill(overrides?: CallOverrides): Promise<BigNumber>;

    feeSend(overrides?: CallOverrides): Promise<BigNumber>;

    feeWallet(overrides?: CallOverrides): Promise<string>;

    fulfill(
      transaction: {
        amount: BigNumberish;
        fromUser: string;
        toUser: string;
        fromChain: string;
        nonce: BigNumberish;
      },
      signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    fulfilledAt(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRelayers(overrides?: CallOverrides): Promise<string[]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getUserTransactions(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber
      ] & {
        amount: BigNumber;
        timestamp: BigNumber;
        fromUser: string;
        toUser: string;
        fromChain: string;
        toChain: string;
        nonce: BigNumber;
        block: BigNumber;
      })[]
    >;

    getUserTransactionsAmount(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTransactionsSlice(
      user_: string,
      offset_: BigNumberish,
      limit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber
      ] & {
        amount: BigNumber;
        timestamp: BigNumber;
        fromUser: string;
        toUser: string;
        fromChain: string;
        toChain: string;
        nonce: BigNumber;
        block: BigNumber;
      })[]
    >;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSupportedChain(
      chain: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    limitPerSend(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    relayerConsensusThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    relayers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    relayersLength(overrides?: CallOverrides): Promise<BigNumber>;

    removeChains(chains: string[], overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    send(
      amount: BigNumberish,
      toUser: string,
      toChain: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFee(
      feeSend_: BigNumberish,
      feeFulfill_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeWallet(feeWallet_: string, overrides?: CallOverrides): Promise<void>;

    setLimitPerSend(
      limitPerSend_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRelayers(
      relayers_: string[],
      relayerConsensusThreshold_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportedChainList(overrides?: CallOverrides): Promise<string[]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transactions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber
      ] & {
        amount: BigNumber;
        timestamp: BigNumber;
        fromUser: string;
        toUser: string;
        fromChain: string;
        toChain: string;
        nonce: BigNumber;
        block: BigNumber;
      }
    >;

    unpause(overrides?: CallOverrides): Promise<void>;

    withdraw(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FulfilledTokens(string,address,string,string,uint256,uint256)"(
      fromUser?: string | null,
      toUser?: string | null,
      fromChain?: null,
      toChain?: null,
      amount?: null,
      exchangeRate?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, BigNumber],
      {
        fromUser: string;
        toUser: string;
        fromChain: string;
        toChain: string;
        amount: BigNumber;
        exchangeRate: BigNumber;
      }
    >;

    FulfilledTokens(
      fromUser?: string | null,
      toUser?: string | null,
      fromChain?: null,
      toChain?: null,
      amount?: null,
      exchangeRate?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, BigNumber],
      {
        fromUser: string;
        toUser: string;
        fromChain: string;
        toChain: string;
        amount: BigNumber;
        exchangeRate: BigNumber;
      }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "SentTokens(address,string,string,string,uint256,uint256)"(
      fromUser?: null,
      toUser?: string | null,
      fromChain?: null,
      toChain?: null,
      amount?: null,
      exchangeRate?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, BigNumber],
      {
        fromUser: string;
        toUser: string;
        fromChain: string;
        toChain: string;
        amount: BigNumber;
        exchangeRate: BigNumber;
      }
    >;

    SentTokens(
      fromUser?: null,
      toUser?: string | null,
      fromChain?: null,
      toChain?: null,
      amount?: null,
      exchangeRate?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, BigNumber],
      {
        fromUser: string;
        toUser: string;
        fromChain: string;
        toChain: string;
        amount: BigNumber;
        exchangeRate: BigNumber;
      }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    CURRENT_CHAIN(overrides?: CallOverrides): Promise<BigNumber>;

    CURRENT_CHAIN_B32(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    FULFILL_TX_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_RELAYERS(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    addChains(
      chains: string[],
      exchangeRatesFromPow: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeRateFrom(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeFulfill(overrides?: CallOverrides): Promise<BigNumber>;

    feeSend(overrides?: CallOverrides): Promise<BigNumber>;

    feeWallet(overrides?: CallOverrides): Promise<BigNumber>;

    fulfill(
      transaction: {
        amount: BigNumberish;
        fromUser: string;
        toUser: string;
        fromChain: string;
        nonce: BigNumberish;
      },
      signatures: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfilledAt(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRelayers(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTransactions(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTransactionsAmount(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTransactionsSlice(
      user_: string,
      offset_: BigNumberish,
      limit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSupportedChain(
      chain: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    limitPerSend(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    relayerConsensusThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    relayers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    relayersLength(overrides?: CallOverrides): Promise<BigNumber>;

    removeChains(
      chains: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    send(
      amount: BigNumberish,
      toUser: string,
      toChain: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFee(
      feeSend_: BigNumberish,
      feeFulfill_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeWallet(
      feeWallet_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLimitPerSend(
      limitPerSend_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRelayers(
      relayers_: string[],
      relayerConsensusThreshold_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportedChainList(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transactions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CURRENT_CHAIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CURRENT_CHAIN_B32(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FULFILL_TX_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_RELAYERS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addChains(
      chains: string[],
      exchangeRatesFromPow: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeRateFrom(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeFulfill(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeSend(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fulfill(
      transaction: {
        amount: BigNumberish;
        fromUser: string;
        toUser: string;
        fromChain: string;
        nonce: BigNumberish;
      },
      signatures: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfilledAt(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRelayers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserTransactions(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserTransactionsAmount(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserTransactionsSlice(
      user_: string,
      offset_: BigNumberish,
      limit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSupportedChain(
      chain: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    limitPerSend(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relayerConsensusThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relayers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relayersLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeChains(
      chains: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    send(
      amount: BigNumberish,
      toUser: string,
      toChain: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      feeSend_: BigNumberish,
      feeFulfill_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeWallet(
      feeWallet_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLimitPerSend(
      limitPerSend_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRelayers(
      relayers_: string[],
      relayerConsensusThreshold_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportedChainList(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transactions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
